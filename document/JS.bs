<pre class='metadata'>
Title: WebAssembly JS API
H1: WebAssembly 
Shortname: wasmjs
Status: CG-DRAFT
ED: https://webassembly.github.io/spec/JS.html
Editor: Andreas Rossberg
Repository: WebAssembly/spec
Abstract: This document provides an explicit JavaScript API for interacting with WebAssembly.
Markup Shorthands: css no, markdown yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp
</pre>

<pre class='biblio'>
{
  "ECMA-262": {
    "href": "https://tc39.github.io/ecma262",
    "title": "ECMAScript® 2018 Language Specification",
    "publisher": "ECMA TC39",
    "status": "Current Editor's Draft",
  },
  "WEBASSEMBLY": {
    "href": "https://webassembly.github.io/spec/",
    "title": "WebAssembly Specification",
    "publisher": "W3C WebAssembly Community Group",
    "status": "Draft",
  },
}
</pre>

<pre class="anchors">
urlPrefix: https://tc39.github.io/ecma262/; spec: ECMA-262
    type: interface; for: ECMAScript
        text: ArrayBuffer; url: sec-arraybuffer-objects
        text: DataView; url: sec-dataview-objects
        text: Map; url: sec-map-objects
        text: Promise; url: sec-promise-objects
        text: Set; url: sec-set-objects
        text: SharedArrayBuffer; url: sec-sharedarraybuffer-objects
    type: exception; for: ECMAScript
        text: Error; url: sec-error-objects
        text: NativeError; url: sec-nativeerror-constructors
    type: dfn
        text: NumericLiteral; url: sec-literals-numeric-literals
        text: ECMAScript error objects; url: sec-error-objects
        text: ToBoolean; url: sec-toboolean
        text: ToNumber; url: sec-tonumber
        text: ToUint16; url: sec-touint16
        text: ToInt32; url: sec-toint32
        text: ToUint32; url: sec-touint32
        text: ToString; url: sec-tostring
        text: ToObject; url: sec-toobject
        text: isFinite; url: sec-isfinite-number
        text: IsAccessorDescriptor; url: sec-isaccessordescriptor
        text: IsDataDescriptor; url: sec-isdatadescriptor
        url: sec-ecmascript-data-types-and-values
            text: Type
            text: Type(x)
        text: sign; url: eqn-sign
        text: floor; url: eqn-floor
        text: min; url: eqn-min
        text: max; url: eqn-max
        text: abs; url: eqn-abs
        text: modulo; url: eqn-modulo
        url: sec-algorithm-conventions
            text: ECMA-262 section 5.2
            text: conventions of the ECMAScript specification
        url: sec-returnifabrupt-shorthands
            text: !
            text: ?
        text: element; url: sec-ecmascript-language-types-string-type
        url: sec-iscallable
            text: IsCallable
            text: callable; for: ECMAScript
        url: sec-well-known-intrinsic-objects
            text: %ArrayPrototype%
            text: %ArrayProto_values%
            text: %MapPrototype%
            text: %SetPrototype%
            text: %Error%
            text: %ErrorPrototype%
            text: %ObjProto_toString%
            text: %IteratorPrototype%
        text: %ObjectPrototype%; url: sec-properties-of-the-object-prototype-object
        text: %FunctionPrototype%; url: sec-properties-of-the-function-prototype-object
        text: %Promise%; url: sec-promise-constructor
        text: Property Descriptor; url: sec-property-descriptor-specification-type
        text: array index; url: sec-array-exotic-objects
        text: OrdinaryGetOwnProperty; url: sec-ordinarygetownproperty
        text: OrdinaryDefineOwnProperty; url: sec-ordinarydefineownproperty
        text: OrdinaryPreventExtensions; url: sec-ordinarypreventextensions
        text: OrdinarySet; url: sec-ordinaryset
        text: equally close values; url: sec-ecmascript-language-types-number-type
        text: internal slot; url: sec-object-internal-methods-and-internal-slots
        text: JavaScript execution context stack; url: execution-context-stack
        text: running JavaScript execution context; url: running-execution-context
        text: GetIterator; url: sec-getiterator
        text: IteratorStep; url: sec-iteratorstep
        text: NormalCompletion; url: sec-normalcompletion
        text: IteratorValue; url: sec-iteratorvalue
        url: sec-well-known-symbols
            text: @@iterator
            text: @@toStringTag
        text: CreateArrayIterator; url: sec-createarrayiterator
        text: CreateIterResultObject; url: sec-createiterresultobject
        text: CreateMapIterator; url: sec-createmapiterator
        text: CreateSetIterator; url: sec-createsetiterator
        text: ArrayCreate; url: sec-arraycreate
        text: CreateDataProperty; url: sec-createdataproperty
        text: DetachArrayBuffer; url: sec-detacharraybuffer
        text: IsDetachedBuffer; url: sec-isdetachedbuffer
        text: IsSharedArrayBuffer; url: sec-issharedarraybuffer
        text: SetIntegrityLevel; url: sec-setintegritylevel
        url: sec-array-iterator-objects
            text: array iterator object
            text: array iterator objects
        text: Call; url: sec-call
        text: Get; url: sec-get-o-p
        text: Set; url: sec-set-o-p-v-throw
        text: constructor; url: constructor
        text: IsConstructor; url: sec-isconstructor
        text: Construct; url: sec-construct
        text: own property; url: sec-own-property
        text: enumerable; url: sec-property-attributes
        text: DefinePropertyOrThrow; url: sec-definepropertyorthrow
        url: sec-code-realms
            text: Realm
            text: ECMAScript global environment
        text: current Realm; url: current-realm
        url: sec-completion-record-specification-type
            text: Completion
            text: Completion Record
            text: abrupt completion
        text: ObjectCreate; url: sec-objectcreate
        text: CreateBuiltinFunction; url: sec-createbuiltinfunction
        text: SetFunctionName; url: sec-setfunctionname
        text: immutable prototype exotic object; url: sec-immutable-prototype-exotic-objects
        text: sections 9.1; url: sec-ordinary-object-internal-methods-and-internal-slots
        text: 9.3.1; url: sec-built-in-function-objects-call-thisargument-argumentslist
        text: ECMA-262 section 9.3; url: sec-built-in-function-objects
        text: built-in function object; url: sec-built-in-function-objects
        text: function object; url: function-object
        text: Array methods; url: sec-properties-of-the-array-prototype-object
        text: typed arrays; url: sec-typedarray-objects
        text: GetMethod; url: sec-getmethod
        text: @@unscopables; url: sec-well-known-symbols
        text: NewTarget; url: sec-built-in-function-objects
        text: Number Type; url: sec-ecmascript-language-types-number-type
        text: JSON.stringify; url: sec-json.stringify
urlPrefix: https://webassembly.github.io/spec/; spec: WebAssembly; type: dfn
    text: WebAssembly module validation url: valid/modules.html#valid-module
    text: binary format of a module url: binary/modules.html
    text: module AST url: syntax/modules.html
</pre>

This API is, initially, the only API for accessing WebAssembly [[WEBASSEMBLY]] from the Web Platform, through a bridge to explicitly construct modules from ECMAScript [[ECMASCRIPT]]. 

Issue: In future versions, WebAssembly
be loaded and run directly from an HTML `<script type='module'>` tag—and
any other Web API that loads ES6 modules via URL—as part of 
[ES6 Module integration](https://github.com/WebAssembly/design/issues/1087).)

Note: WebAssembly JS API declaration file for TypeScript can be found [here](https://github.com/01alchemist/webassembly-types/blob/master/webassembly.d.ts) which enable autocompletion and make TypeScript compiler happy.

The WebAssembly Object
======================

The following IDL uses a couple features which are not in IDL currently:
- To support constructors which are properties of the WebAssembly object, namespaces define interfacemembers. In the ECMAScript binding, these are writable, configurable, non-enumerable properties of the namespace. Inner interfaces inherit the exposure set of the outer namespace.
- The @@toStringTag of interfaces which are declared in a namespace is the name of the outer namespace, followed by `.`, followed by the name of the interface.
- The `[Nowrap]` extended attribute to an integer type throws a RangeError if the Number is greater than or less than the range which can be accurately represented by the type.  

<pre class="idl">
[Exposed=(Window,Worker)]
namespace WebAssembly {
  boolean validate(BufferSource bytes);
  Promise<Module> compile(BufferSource bytes);
  
  Promise<WebAssemblyInstantiatedSource> instantiate(
      BufferSource bytes, optional ImportObject importObject);

  Promise<WebAssembly.Instance> instantiate(
      Module moduleObject, optional ImportObject importObject);
};
</pre>

<div algorithm>
  To <dfn>parse a WebAssembly binary module</dfn> from a BufferSource <var>buffer</var>, return a [=module AST=] whose [=binary format of a module|binary format=] is bytewise identical to <var>buffer</var>. If no such AST can be found, throw a {{WebAssembly.CompileError}} exception.
</div>

<div algorithm>
  To <dfn>validate a WebAssembly module</dfn> from a WebAssembly AST <var>ast</var>, attempt to prove ⊢ <var>ast</var> from the logic in [=WebAssembly module validation=]. If it can be derived, return. Otherwise, throw a {{WebAssembly.CompileError}} exception.
</div>

<div algorithm>
  The <dfn method for="WebAssembly">validate</dfn>(<var>bytes</var>) method, when invoked, performs the following steps:
  1. Let <var>ast</var> be the result of {{parsing the WebAssembly binary|parse the WebAssembly binary}}. If this throws an exception, catch it, and return `false`.
  1. [=validate a WebAssembly module|validate the WebAssembly module=] <var>ast</var>. If this throws an exception, catch it, and return `false`.
  1. Return `true`.
</div>

<div algorithm>
  1. 
from `bytes` as described in the [`WebAssembly.Module` constructor](#webassemblymodule-constructor)
and then queue a task to instantiate the resulting `Module` with `importObject` as described in the
[`WebAssembly.Instance` constructor](#webassemblyinstance-constructor). After the instantiation task runs
and before any subsequent steps are taken, other unspecified asynchronous tasks may be run.
On success, the `Promise` is [fulfilled](http://tc39.github.io/ecma262/#sec-fulfillpromise)
with a plain JavaScript object pair `{module, instance}` containing the resulting
`WebAssembly.Module` and `WebAssembly.Instance`. The 2 properties `module` and `instance` of the returned pair are  configurable, enumerable and writable. 

On failure, the `Promise` is
[rejected](http://tc39.github.io/ecma262/#sec-rejectpromise) with a 
`WebAssembly.CompileError`, `WebAssembly.LinkError`, or `WebAssembly.RuntimeError`, depending on the cause of failure.

The asynchronous compilation is logically performed on a copy of the state of
the given `BufferSource` captured during the call to `instantiate`; subsequent mutations
of the `BufferSource` after `instantiate` return do not affect ongoing compilations.
</div>

<div algorithm>
  The <dfn method for="WebAssembly">compile</dfn>(<var>bytes</var>) method, when invoked, returns a new promise <var>promise</var> and performs the following steps in parallel:
  1. Let <var>module</var> be \[[Construct]]({{WebAssembly.Module}}, <var>bytes</var>. If this throws an exception, catch it, and reject <var>promise</var> with the exception.
  1. Resolve <var>promise</var> with <var>module</var>.
</div>

Note: A follow-on streaming API is documented [in the WebAssembly design repository](https://github.com/WebAssembly/design/blob/master/Web.md#additional-web-embedding-api).

<pre class="idl">
dictionary WebAssemblyInstantiatedSource {
   required WebAssembly.Module module;
   required WebAssembly.Instance instance;
};

typedef (undefined or object) ImportObject;

enum ImportExportKind {
  "function",
  "table",
  "memory",
  "global"
};

dictionary ModuleExportDescriptor {
  required string name;
  required ImportExportKind kind;
};

dictionary ModuleImportDescriptor {
  required string module;
  required string name;
  required ImportExportKind kind;
};

partial namespace WebAssembly {
  [Contructor(BufferSource bytes)]
  interface Module {
    static sequence<ModuleExportDescriptor> exports(Module module);
    static sequence<ModuleImportDescriptor> imports(Module module);
   static sequence<ArrayBuffer> customSections(Module module, string sectionName);
 };
};

typedef (ExportedFunction or double or
         WebAssembly.Memory or WebAssembly.Table)
    WebAssemblyRuntimeValue;

typedef record<string, WebAssemblyRuntimeValue> InstanceExportMap;

typedef record<string, InstanceExportsMap> InstanceImportsMap;

partial namespace WebAssembly {
  [Contructor(Module module, optional InstanceImportsMap,  importObject)]
  interface Instance {
    readonly attribute InstanceExportsMap exports;
  };
};

dictionary MemoryDescriptor {
  required [Nowrap] unsigned long initial;
  optional [Nowrap] unsigned long maximum;
};

partial namespace WebAssembly {
  [Constructor(MemoryDecriptor descriptor)]
  interface Memory {
    void grow([Nowrap] unsigned long delta);
    readonly attribute ArrayBuffer buffer;
  };
};

enum TableKind {
  "anyfunc",
};

dictionary TableDescriptor {
  required TableKind element;
  required [Nowrap] unsigned long initial;
  optional [Nowrap] unsigned long maximum;
};

partial interface WebAssembly {
  [Constructor(TableDecriptor descriptor)]
  interface Memory {
    void grow([Nowrap] unsigned long delta);
    ExportedFunction get([Nowrap] unsigned long delta);
    set([Nowrap] unsigned long delta, ExportedFunction value);
    readonly attribute unsigned long length;
  };
};

[NoInterfaceObject]
interface ExportedFunction : Function { }
</pre>

Error objects
-------------

WebAssembly defines three Error classes. Analogous to DOMException, WebAssembly errors have the following custom bindings:
- Unlike normal interface types, the interface prototype object for DOMException must have as its [[Prototype]] the intrinsic object %ErrorPrototype%.
- If an implementation gives native Error objects special powers or nonstandard properties (such as a stack property), it should also expose those on DOMException instances.
- The constructor and properties of WebAssembly errors is as specified for [NativeErrors](https://tc39.github.io/ecma262/#sec-nativeerror-constructors).

<pre class='idl'>
partial interface WebAssembly {
  interface CompileError { }
  interface LinkError { }
  interface RuntimeError { }
}
</pre>

Error condition mappings to JavaScript
==============

Running WebAssembly programs encounter certain events which halt execution of the WebAssembly code.
WebAssembly code (currently)
has no way to catch these conditions and thus an exception will necessarily
propagate to the enclosing non-WebAssembly caller (either the browser or
JavaScript) where it is handled like a normal JavaScript exception.

If WebAssembly calls JavaScript via import and the JavaScript throws an
exception, the exception is propagated through the WebAssembly activation to the
enclosing caller.

Because JavaScript exceptions can be handled, and JavaScript can continue to
call WebAssembly exports after a trap has been handled, traps do not, in
general, prevent future execution.

Traps
-----

Whenever WebAssembly semantics specify a [trap](https://webassembly.github.io/spec/intro/overview.html#trap),
a `WebAssembly.RuntimeError` object is thrown to the enclosing JavaScript. 

Stack Overflow
---------

Whenever a [stack overflow](Semantics.md#stack-overflow) occurs in
WebAssembly code, the same class of exception is thrown as for a stack overflow in
JavaScript. The particular exception here is implementation-defined in both cases.

Out of Memory
---------

Whenever validation, compilation or instantiation run out of memory, the
same class of exception is thrown as for out of memory conditions in JavaScript.
The particular exception here is implementation-defined in both cases.
